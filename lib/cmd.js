// Generated by CoffeeScript 1.4.0
(function() {
  var CommandSpec, EventEmitter, child, loglet, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  child = require('child_process');

  _ = require('underscore');

  EventEmitter = require('events').EventEmitter;

  loglet = require('loglet');

  CommandSpec = (function() {

    CommandSpec["default"] = {
      prefix: '--',
      delim: ''
    };

    CommandSpec.build = function(program, options) {
      if (options == null) {
        options = {};
      }
      return new CommandSpec(program, options);
    };

    function CommandSpec(program, options) {
      var builder, command;
      this.program = program;
      this.options = options != null ? options : {};
      this.options = _.extend({}, CommandSpec["default"], this.options);
      builder = this;
      this.maker = command = (function(_super) {

        __extends(command, _super);

        function command(options) {
          this.builder = builder;
          this.args = [];
          this.initialize(options);
          this;

        }

        command.prototype.initialize = function(options) {
          var key, val, _results;
          _results = [];
          for (key in options) {
            val = options[key];
            if (this[key] instanceof Function) {
              if (val instanceof Array) {
                _results.push(this[key].apply(this, val));
              } else {
                _results.push(this[key](val));
              }
            } else {
              throw {
                error: 'syscall_unknown_key',
                key: key,
                val: val
              };
            }
          }
          return _results;
        };

        command.prototype.spawn = function() {
          return builder.spawn(this.args);
        };

        command.prototype.exec = function(cb) {
          return builder.exec(this.args, cb);
        };

        return command;

      })(EventEmitter);
      this;

    }

    CommandSpec.prototype.make = function(options) {
      if (options == null) {
        options = {};
      }
      return new this.maker(options);
    };

    CommandSpec.prototype.flag = function(key, options) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      this.maker.prototype[key] = function() {
        this.args.push(this.builder._makeFlag(key, options));
        return this;
      };
      this[key] = function() {
        var cmd;
        cmd = _this.make();
        return cmd[key]();
      };
      return this;
    };

    CommandSpec.prototype.keyval = function(key, val, options) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      this.maker.prototype[key] = function(val) {
        this.args.push(this.builder.makeFlag(key, options));
        this.args.push(val);
        return this;
      };
      this[key] = function(val) {
        var cmd;
        cmd = _this.make();
        return cmd[key](val);
      };
      return this;
    };

    CommandSpec.prototype["default"] = function(key) {
      var _this = this;
      this.maker.prototype[key] = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        this.args = this.args.concat(args);
        return this;
      };
      this[key] = function() {
        var args, cmd;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        cmd = _this.make();
        return cmd[key].apply(cmd, args);
      };
      return this;
    };

    CommandSpec.prototype._makeFlag = function(key, options) {
      var flag;
      flag = options.proc ? options.proc() : options.key ? options.key : options.prefix ? options.prefix + key + options.delim || this.options.delim : this.options.prefix + key + options.delim || this.options.delim;
      return flag;
    };

    CommandSpec.prototype.spawn = function(args) {
      return child.spawn(this.program, args);
    };

    CommandSpec.prototype.exec = function(args, cb) {
      return child.exec(this.compile(args), cb);
    };

    CommandSpec.prototype.compile = function(args) {
      var arg, cmd, escaped;
      escaped = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          arg = args[_i];
          _results.push(this.escape(arg));
        }
        return _results;
      }).call(this);
      cmd = [this.program].concat(escaped).join(' ');
      loglet.debug('cmd.compile', cmd);
      return cmd;
    };

    CommandSpec.prototype.escape = function(arg) {
      var regex;
      regex = /([^a-zA-Z0-9])/g;
      return arg.replace(regex, '\\$1');
    };

    return CommandSpec;

  })();

  module.exports = CommandSpec;

}).call(this);
